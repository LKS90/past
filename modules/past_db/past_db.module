<?php

/**
 * Module file for the Past DB module.
 */

/**
 * Implements hook_entity_info()
 */
function past_db_entity_info() {
  $info['past_event'] = array(
    'label' => t('Past Event'),
    'module' => 'past_db',
    'controller class' => 'PastEventController',
    'metadata controller class' => 'PastDBEventMetadataController',
    'views controller class' => 'PastDBEventViewsController',
    'entity class' => 'PastEvent',
    'base table' => 'past_event',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'access callback' => 'past_permission',
    'entity keys' => array(
      'id' => 'event_id',
    ),
    'admin ui' => array(
      'controller class' => 'PastDBEventUIController',
      'path' => 'admin/reports/past',
    ),
  );

  $info['past_event_argument'] = array(
    'label' => t('Past Event Argument'),
    'module' => 'past_db',
    'controller class' => 'PastEventArgumentController',
    'metadata controller class' => 'PastDBEventMetadataController',
    //'views controller class' => 'PastDBArgumentViewsController',
    'entity class' => 'PastEventArgument',
    'base table' => 'past_event_argument',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'access callback' => 'past_permission',
    'entity keys' => array(
      'id' => 'argument_id',
    ),
  );

  return $info;
}

/**
 * Implements hook_cron().
 */
function past_db_cron() {
  // Check if expiration is enabled.
  if ($expire = variable_get('past_events_expire', 0)) {
    // Fetch up to 100 past events to delete, delete oldest first.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'past_event');
    $query->propertyCondition('timestamp', REQUEST_TIME - $expire, '<');
    $query->propertyOrderBy('timestamp');
    $query->range(0, 100);
    $result = $query->execute();
    if ($result) {
      entity_delete_multiple('past_event', array_keys($result['past_event']));
    }
  }
}

/**
 * Implements views arguments details.
 * defined in PastDBArgumentUIController::hook_menu().
 */
function past_db_event_view($event) {
  return entity_view($event->entityType(), array($event), 'full', NULL, TRUE);
}

