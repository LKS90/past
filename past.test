<?php

/*
 * @file
 * Contains tests for the past modules
 */

class PastTest extends DrupalWebTestCase {

  protected $profile = 'testing';

  static function getInfo() {
    return array(
      'name' => 'Past API tests',
      'description' => 'Generic API tests using the database backend',
      'group' => 'Past',
    );
  }

  function setUp() {
    parent::setUp(array('past', 'past_db'));
  }

  function testSave() {
    past_event_save('past', 'test', 'A test log entry');
    $event = $this->getLastEventByMachinename('test');
    $this->assertEqual('past', $event->getModule());
    $this->assertEqual('test', $event->getMachineName());
    $this->assertEqual('A test log entry', $event->getMessage());
    $this->assertEqual(REQUEST_TIME, $event->getTimestamp());
    $this->assertEqual(PAST_SEVERITY_INFO, $event->getSeverity());
    $this->assertEqual(array(), $event->getArguments());

    past_event_save('past', 'test1', 'Another test log entry');
    $event = $this->getLastEventByMachinename('test1');
    $this->assertEqual('Another test log entry', $event->getMessage());

    $test_string = $this->randomString();
    past_event_save('past', 'test_argument', 'A test log entry with arguments', array('test' => $test_string, 'test2' => 5));
    $event = $this->getLastEventByMachinename('test_argument');
    $this->assertEqual(2, count($event->getArguments()));
    $this->assertEqual($test_string, $event->getArgument('test')->getData());
    $this->assertEqual(5, $event->getArgument('test2')->getData());
    $this->assertEqual('test', $event->getArgument('test')->getKey());
    $this->assertEqual('string', $event->getArgument('test')->getType());
    $this->assertEqual('integer', $event->getArgument('test2')->getType());

    $this->assertNull($event->getArgument('does_not_exist'));

    $array_argument = array(
      'key1' => $this->randomString(),
      'key2' => $this->randomString(),
    );
    past_event_save('past', 'test_array', 'Array argument', array('array' => $array_argument));
    $event = $this->getLastEventByMachinename('test_array');
    $this->assertEqual(1, count($event->getArguments()));
    $this->assertEqual($array_argument, $event->getArgument('array')->getData());
    $this->assertEqual('array', $event->getArgument('array')->getType());

    $user = $this->drupalCreateUser();
    past_event_save('past', 'test_user', 'Object argument', array('user' => $user));
    $event = $this->getLastEventByMachinename('test_user');
    $this->assertEqual($user, $event->getArgument('user')->getData());
    $this->assertEqual('stdClass', $event->getArgument('user')->getType());

    $exception = new Exception('An exception', 500);
    past_event_save('past', 'test_exception', 'An exception', array('exception' => $exception));
    $event = $this->getLastEventByMachinename('test_exception');
    debug($event->getArgument('exception')->getData());
    $this->assertEqual((array)$exception, $event->getArgument('exception')->getData());
    $this->assertEqual('Exception', $event->getArgument('exception')->getType());

    past_event_save('past', 'test_timestamp', 'Event with a timestamp', array(), array('timestamp' => REQUEST_TIME - 1));
    $event = $this->getLastEventByMachinename('test_timestamp');
    $this->assertEqual(REQUEST_TIME - 1, $event->getTimestamp());
  }

  public function dtestObjectOrientedInterface() {
    $event = past_event_create('past', 'test1', 'Message with arguments');
    $argument = $event->addArgument('first', array('data' => array('sub' => 'value')));
    $argument->setRaw(array('data' => array('sub' => 'value')));
    $event->save();
  }

  /**
   * Returns the last event with a given machine name.
   *
   * @param string $machine_name
   *
   * @return PastEventInterface
   */
  public function getLastEventByMachinename($machine_name) {
    $event_id = db_query_range('SELECT event_id FROM {past_event} WHERE machine_name = :machine_name ORDER BY event_id DESC', 0, 1, array(':machine_name' => $machine_name))->fetchField();
    if ($event_id) {
      return entity_load_single('past_event', $event_id);
    }
  }

}