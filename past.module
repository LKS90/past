<?php

/**
 * @file
 * Module file for the past project.
 */

define('PAST_SEVERITY_ERROR', 1);
define('PAST_SEVERITY_WARNING', 2);
define('PAST_SEVERITY_INFO', 4);
define('PAST_SEVERITY_DEBUG', 8);

/**
 * Creates and saves a past event.
 *
 * @param string $module
 *   The name of the module which is logging the event.
 * @param $machine_name
 *   The machine name of the event.
 * @param type $message
 *   A description of the event.
 * @param array $arguments
 *   An array of arguments to be saved with the event. They array key is used
 *   as the argument key and the value is the argument data.
 * @param array $options
 *   An array of additional options. Any of the following:
 *     - timestamp: Override the timestamp, defaults to REQUEST_TIME
 *     - severity: One of PAST_SEVERITY_DEBUG, PAST_SEVERITY_INFO,
 *         PAST_SEVERITY_WARNING and PAST_SEVERITY_ERROR.
 *
 * @return PastEventInterface
 *
 * @see past_event_create()
 */
function past_event_save($module, $machine_name, $message, array $arguments = array(), array $options = array()) {
  $event = past_event_create($module, $machine_name, $message, $options);

  foreach ($arguments as $key => $argument) {
    $event->addArgument($key, $argument);
  }
  $event->save();
  return $event;
}

/**
 * Creates a past event.
 *
 * @param string $module
 *   The name of the module which is logging the event.
 * @param $machine_name
 *   The machine name of the event.
 * @param type $message
 *   A description of the event.
 * @param array $arguments
 *   An array of arguments to be saved with the event. They array key is used
 *   as the argument key and the value is the argument data.
 * @param array $options
 *   An array of additional options. Any of the following:
 *     - timestamp: Override the timestamp, defaults to REQUEST_TIME
 *     - severity: One of PAST_SEVERITY_DEBUG, PAST_SEVERITY_INFO,
 *         PAST_SEVERITY_WARNING and PAST_SEVERITY_ERROR.
 *
 * @return PastEventInterface
 *
 * @see past_event_save()
 */
function past_event_create($module, $machine_name, $message = NULL, array $options = array()) {
  switch (variable_get('past_backend', 'past_db')) {
    case 'past_simpletest':
      $event = new PastEventSimpletest(array());
      break;
    case 'past_db':
    default:
      $event = entity_create('past_event', array());
  }

  /* @var $event PastEventInterface */
  $event->setModule($module);
  $event->setMachineName($machine_name);
  if ($message) {
    $event->setMessage($message);
  }

  foreach ($options as $key => $value) {
    switch ($key) {
      case 'timestamp':
        $event->setTimestamp($value);
        break;

      case 'severity':
        $event->setSeverity($value);
        break;
    }
  }
  return $event;
}

/**
 * Returns an array of past event severities.
 */
function past_event_severities() {
  return array(
    PAST_SEVERITY_DEBUG => t('Debug'),
    PAST_SEVERITY_INFO => t('Info'),
    PAST_SEVERITY_WARNING => t('Warning'),
    PAST_SEVERITY_ERROR => t('Error'),
  );
}


/**
 * Implements hook_menu().
 */
function past_menu() {
  $items['admin/config/past/settings'] = array(
    'title' => 'Past settings',
    'description' => 'Configure relevance settings for past events.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_admin_settings'),
    'access arguments' => array('administer past'),
    'file' => 'past.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function past_permission() {
  return array(
    'administer past' => array(
      'title' => t('Administer Past'),
    ),
  );
}
